{"ast":null,"code":"import { putBlack2, putWhite2 } from \"./EditBoard\";\nconst HandleChange = (props, props2, info, info2, info3) => {\n  switch (info.isEdit) {\n    case 0:\n      cellChecker();\n      break;\n    case 1:\n      putBlack2(props, props2, info3);\n      break;\n    case 2:\n      putWhite2(props, props2, info3);\n      break;\n  }\n  function cellChecker() {\n    //石を置けるかどうかの判定\n    let changeCell = [];\n    let forChangeCell = [];\n    const column = Number(props);\n    const row = Number(props2);\n    //普通にcolumnとrowがプロパゲートされた段階で文字列だからNumber()で数字に直す必要がある。\n    //だからcolumn: nubmer = propsではエラーが出る。\n    let diagonalCounter = 0;\n    let stringed;\n    //例外の処理\n    if (info.squares[column][row] !== \" \") {\n      return;\n    }\n    if (info.isWhite === true) {\n      //下がひっくり返るか\n      for (let i = column; i < 8; i++) {\n        forChangeCell.push(info.squares[i][row]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(column + i + \" \" + row);\n        }\n      }\n      forChangeCell = [];\n      //右がひっくり返るか\n      for (let i = props2; i < 8; i++) {\n        forChangeCell.push(info.squares[column][i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(props + \" \" + (row + i));\n        }\n      }\n      forChangeCell = [];\n      //上がひっくり返るか\n      for (let i = column; i > -1; i--) {\n        forChangeCell.push(info.squares[i][row]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(column - i + \" \" + row);\n        }\n      }\n      forChangeCell = [];\n      //左がひっくり返るか\n      for (let i = row; i > -1; i--) {\n        forChangeCell.push(info.squares[column][i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(column + \" \" + (row - i));\n        }\n      }\n      forChangeCell = [];\n      //右下がひっくり返るか\n      if (7 - column < 7 - row) {\n        diagonalCounter = 7 - column + 1;\n      } else if (7 - column > 7 - row) {\n        diagonalCounter = 7 - row + 1;\n      } else {\n        diagonalCounter = 7 - row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column + i][row + i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(column + i + \" \" + (row + i));\n        }\n      }\n      forChangeCell = [];\n      //左下がひっくり返るか\n      if (7 - column < row) {\n        diagonalCounter = 7 - column + 1;\n      } else if (7 - column > row) {\n        diagonalCounter = row + 1;\n      } else {\n        diagonalCounter = row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column + i][row - i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(column + i + \" \" + (row - i));\n        }\n      }\n      forChangeCell = [];\n      //左上がひっくり返るか\n      if (column < row) {\n        diagonalCounter = column + 1;\n      } else if (column > row) {\n        diagonalCounter = row + 1;\n      } else {\n        diagonalCounter = row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column - i][row - i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(column - i + \" \" + (row - i));\n        }\n      }\n      forChangeCell = [];\n      //右上がひっくり返るか\n      if (column < 7 - row) {\n        diagonalCounter = column + 1;\n      } else if (column > 7 - row) {\n        diagonalCounter = 7 - row + 1;\n      } else {\n        diagonalCounter = 7 - row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column - i][row + i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n        for (let i = 1; i < stringed.indexOf(\"BW\") + 1; i++) {\n          changeCell.push(column - i + \" \" + (row + i));\n        }\n      }\n      forChangeCell = [];\n    } else {\n      //下がひっくり返るか\n      for (let i = column; i < 8; i++) {\n        forChangeCell.push(info.squares[i][row]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(column + i + \" \" + row);\n        }\n      }\n      forChangeCell = [];\n      //右がひっくり返るか\n      for (let i = props2; i < 8; i++) {\n        forChangeCell.push(info.squares[column][i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(props + \" \" + (row + i));\n        }\n      }\n      forChangeCell = [];\n      //上がひっくり返るか\n      for (let i = column; i > -1; i--) {\n        forChangeCell.push(info.squares[i][row]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(column - i + \" \" + row);\n        }\n      }\n      forChangeCell = [];\n      //左がひっくり返るか\n      for (let i = row; i > -1; i--) {\n        forChangeCell.push(info.squares[column][i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(column + \" \" + (row - i));\n        }\n      }\n      forChangeCell = [];\n      //右下がひっくり返るか\n      if (7 - column < 7 - row) {\n        diagonalCounter = 7 - column + 1;\n      } else if (7 - column > 7 - row) {\n        diagonalCounter = 7 - row + 1;\n      } else {\n        diagonalCounter = 7 - row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column + i][row + i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(column + i + \" \" + (row + i));\n        }\n      }\n      forChangeCell = [];\n      //左下がひっくり返るか\n      if (7 - column < row) {\n        diagonalCounter = 7 - column + 1;\n      } else if (7 - column > row) {\n        diagonalCounter = row + 1;\n      } else {\n        diagonalCounter = row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column + i][row - i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(column + i + \" \" + (row - i));\n        }\n      }\n      forChangeCell = [];\n      //左上がひっくり返るか\n      if (column < row) {\n        diagonalCounter = column + 1;\n      } else if (column > row) {\n        diagonalCounter = row + 1;\n      } else {\n        diagonalCounter = row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column - i][row - i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(column - i + \" \" + (row - i));\n        }\n      }\n      forChangeCell = [];\n      //右上がひっくり返るか\n      if (column < 7 - row) {\n        diagonalCounter = column + 1;\n      } else if (column > 7 - row) {\n        diagonalCounter = 7 - row + 1;\n      } else {\n        diagonalCounter = 7 - row + 1;\n      }\n      for (let i = 0; i < diagonalCounter; i++) {\n        forChangeCell.push(info.squares[column - i][row + i]);\n      }\n      stringed = forChangeCell.join(\"\");\n      if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n        for (let i = 1; i < stringed.indexOf(\"WB\") + 1; i++) {\n          changeCell.push(column - i + \" \" + (row + i));\n        }\n      }\n      forChangeCell = [];\n    }\n\n    //実際にマスを反転させる処理。changeCellに反転させるマスの番地が入っている。\n    if (changeCell.length === 0) {\n      return;\n    }\n    const newSquares = JSON.parse(JSON.stringify(info.squares));\n    if (info.isWhite === true) {\n      for (let i = 0; i < changeCell.length; i++) {\n        newSquares[changeCell[i][0]][changeCell[i][2]] = \"W\";\n      }\n      newSquares[column][row] = \"W\";\n    } else {\n      for (let i = 0; i < changeCell.length; i++) {\n        newSquares[changeCell[i][0]][changeCell[i][2]] = \"B\";\n      }\n      newSquares[column][row] = \"B\";\n    }\n    const history = info.history.slice();\n    history.push(newSquares);\n    const historyCount = info.historyCount + 1;\n    info3.setState({\n      squares: newSquares,\n      history: history,\n      historyCount: historyCount,\n      isWhite: !info2,\n      isCleaned: false\n    });\n    changeCell = [];\n    console.log(history);\n    console.log(historyCount);\n  }\n};\n_c = HandleChange;\nexport default HandleChange;\nvar _c;\n$RefreshReg$(_c, \"HandleChange\");","map":{"version":3,"names":["putBlack2","putWhite2","HandleChange","props","props2","info","info2","info3","isEdit","cellChecker","changeCell","forChangeCell","column","Number","row","diagonalCounter","stringed","squares","isWhite","i","push","join","indexOf","length","newSquares","JSON","parse","stringify","history","slice","historyCount","setState","isCleaned","console","log"],"sources":["/Users/hatanoriku/go/src/othello/src/HandleChange2.ts"],"sourcesContent":["import { putBlack, putBlack2, putWhite2 } from \"./EditBoard\";\n\nconst HandleChange = (props: number, props2: number, info: any, info2: boolean, info3: any): void => {\n    switch (info.isEdit) {\n        case 0: cellChecker();\n        break;\n        case 1: putBlack2(props, props2, info3)\n        break;\n        case 2: putWhite2(props, props2, info3)\n        break;\n    }\n    \n    function cellChecker() {\n        //石を置けるかどうかの判定\n        let changeCell: any[] = []\n        let forChangeCell: any[] = []\n        const column = Number(props)\n        const row = Number(props2)\n        //普通にcolumnとrowがプロパゲートされた段階で文字列だからNumber()で数字に直す必要がある。\n        //だからcolumn: nubmer = propsではエラーが出る。\n        let diagonalCounter: any = 0\n        let stringed: string\n        //例外の処理\n        if (info.squares[column][row] !== \" \") {\n            return\n        }\n        if (info.isWhite === true) {\n            //下がひっくり返るか\n            for (let i = column ; i < 8 ; i++) {\n                forChangeCell.push(info.squares[i][row])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1; i++) {\n                    changeCell.push(column + i + \" \" + row)\n                }\n            }\n            forChangeCell = []\n            //右がひっくり返るか\n            for (let i = props2 ; i < 8 ; i++) {\n                forChangeCell.push(info.squares[column][i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1; i++) {\n                    changeCell.push(props + \" \" + (row + i))\n                }\n            }\n            forChangeCell = []\n            //上がひっくり返るか\n            for (let i = column ; i > -1 ; i--) {\n                forChangeCell.push(info.squares[i][row])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1 ; i++) {\n                    changeCell.push((column - i) + \" \" + row)\n                }\n            }\n            forChangeCell = []\n            //左がひっくり返るか\n            for (let i = row ; i > -1 ; i--) {\n                forChangeCell.push(info.squares[column][i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1 ; i++) {\n                    changeCell.push(column + \" \" + (row - i))\n                }\n            }\n            forChangeCell = []\n            //右下がひっくり返るか\n            if (7 - column < 7 - row) {\n                diagonalCounter = 7 - column + 1\n            } else if (7 - column > 7 - row) {\n                diagonalCounter = 7 - row + 1\n            } else {\n                diagonalCounter = 7 - row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column + i][row + i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1 ; i++) {\n                    changeCell.push((column + i) + \" \" + (row + i))\n                }\n            }\n            forChangeCell = []\n            //左下がひっくり返るか\n            if (7 - column < row) {\n                diagonalCounter = 7 - column + 1\n            } else if (7 - column > row) {\n                diagonalCounter = row + 1\n            } else {\n                diagonalCounter = row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column + i][row - i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1 ; i++) {\n                    changeCell.push((column + i) + \" \" + (row - i))\n                }\n            }\n            forChangeCell = []\n            //左上がひっくり返るか\n            if (column < row) {\n                diagonalCounter = column + 1\n            } else if (column > row) {\n                diagonalCounter = row + 1\n            } else {\n                diagonalCounter = row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column - i][row - i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1 ; i++) {\n                    changeCell.push((column - i) + \" \" + (row - i))\n                }\n            }\n            forChangeCell = []\n            //右上がひっくり返るか\n            if (column < 7 - row) {\n                diagonalCounter = column + 1\n            } else if (column > 7 - row) {\n                diagonalCounter = 7 - row + 1\n            } else {\n                diagonalCounter = 7 - row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column - i][row + i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"BW\") !== -1 && stringed.indexOf(\"B\") === 1 && stringed.indexOf(\"B \") === -1 || stringed.indexOf(\"B \") > stringed.indexOf(\"W\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"BW\") + 1 ; i++) {\n                    changeCell.push((column - i) + \" \" + (row + i))\n                }\n            }\n            forChangeCell = []\n        } else {\n            //下がひっくり返るか\n            for (let i = column ; i < 8 ; i++) {\n                forChangeCell.push(info.squares[i][row])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1; i++) {\n                    changeCell.push(column + i + \" \" + row)\n                }\n            }\n            forChangeCell = []\n            //右がひっくり返るか\n            for (let i = props2 ; i < 8 ; i++) {\n                forChangeCell.push(info.squares[column][i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1; i++) {\n                    changeCell.push(props + \" \" + (row + i))\n                }\n            }\n            forChangeCell = []\n            //上がひっくり返るか\n            for (let i = column ; i > -1 ; i--) {\n                forChangeCell.push(info.squares[i][row])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1 ; i++) {\n                    changeCell.push((column - i) + \" \" + row)\n                }\n            }\n            forChangeCell = []\n            //左がひっくり返るか\n            for (let i = row ; i > -1 ; i--) {\n                forChangeCell.push(info.squares[column][i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1 ; i++) {\n                    changeCell.push(column + \" \" + (row - i))\n                }\n            }\n            forChangeCell = []\n            //右下がひっくり返るか\n            if (7 - column < 7 - row) {\n                diagonalCounter = 7 - column + 1\n            } else if (7 - column > 7 - row) {\n                diagonalCounter = 7 - row + 1\n            } else {\n                diagonalCounter = 7 - row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column + i][row + i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1 ; i++) {\n                    changeCell.push((column + i) + \" \" + (row + i))\n                }\n            }\n            forChangeCell = []\n            //左下がひっくり返るか\n            if (7 - column < row) {\n                diagonalCounter = 7 - column + 1\n            } else if (7 - column > row) {\n                diagonalCounter = row + 1\n            } else {\n                diagonalCounter = row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column + i][row - i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1 ; i++) {\n                    changeCell.push((column + i) + \" \" + (row - i))\n                }\n            }\n            forChangeCell = []\n            //左上がひっくり返るか\n            if (column < row) {\n                diagonalCounter = column + 1\n            } else if (column > row) {\n                diagonalCounter = row + 1\n            } else {\n                diagonalCounter = row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column - i][row - i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1 ; i++) {\n                    changeCell.push((column - i) + \" \" + (row - i))\n                }\n            }\n            forChangeCell = []\n            //右上がひっくり返るか\n            if (column < 7 - row) {\n                diagonalCounter = column + 1\n            } else if (column > 7 - row) {\n                diagonalCounter = 7 - row + 1\n            } else {\n                diagonalCounter = 7 - row + 1\n            }\n            for (let i = 0 ; i < diagonalCounter ; i++) {\n                forChangeCell.push(info.squares[column - i][row + i])\n            }\n            stringed = forChangeCell.join(\"\")\n            if (stringed.indexOf(\"WB\") !== -1 && stringed.indexOf(\"W\") === 1 && stringed.indexOf(\"W \") === -1 || stringed.indexOf(\"W \") > stringed.indexOf(\"B\")) {\n                for (let i = 1 ; i < stringed.indexOf(\"WB\") + 1 ; i++) {\n                    changeCell.push((column - i) + \" \" + (row + i))\n                }\n            }\n            forChangeCell = []\n        }\n\n\n        //実際にマスを反転させる処理。changeCellに反転させるマスの番地が入っている。\n        if (changeCell.length === 0) {\n            return;\n        }\n        const newSquares = JSON.parse(JSON.stringify(info.squares))\n        if (info.isWhite === true) {\n            for (let i = 0 ; i < changeCell.length ; i++) {\n                newSquares[changeCell[i][0]][changeCell[i][2]] = \"W\"\n            } \n            newSquares[column][row] = \"W\"\n        } else {\n            for (let i = 0 ; i < changeCell.length ; i++) {\n                newSquares[changeCell[i][0]][changeCell[i][2]] = \"B\"\n            } \n            newSquares[column][row] = \"B\"\n        }\n        const history = info.history.slice()\n        history.push(newSquares)\n        const historyCount = info.historyCount + 1\n\n        info3.setState({\n            squares: newSquares,\n            history: history,\n            historyCount: historyCount,\n            isWhite: !info2,\n            isCleaned: false\n        })\n        \n        changeCell = []\n        console.log(history)\n        console.log(historyCount)\n    }\n}\nexport default HandleChange;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}